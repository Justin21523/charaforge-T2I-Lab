# core/t2i/watermark.py - Watermarking and attribution
from PIL import Image, ImageDraw, ImageFont
from typing import Optional


class WatermarkManager:
    """Handles watermarking and attribution for generated images"""

    def __init__(self):
        self.cache_paths = get_cache_paths()

    def add_watermark(
        self,
        image: Image.Image,
        text: str = "Generated by CharaForge",
        opacity: float = 0.1,
        position: str = "bottom-right",
    ) -> Image.Image:
        """Add text watermark to image"""

        # Create watermark overlay
        watermark = Image.new("RGBA", image.size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(watermark)

        # TODO: Load font and calculate positioning
        # font = ImageFont.truetype("arial.ttf", size=16)
        # text_bbox = draw.textbbox((0, 0), text, font=font)
        # text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]

        # Calculate position
        if position == "bottom-right":
            x = image.width - 150  # Mock positioning
            y = image.height - 30
        else:
            x, y = 10, 10

        # Draw watermark text
        draw.text((x, y), text, fill=(255, 255, 255, int(255 * opacity)))

        # Composite watermark onto image
        watermarked = Image.alpha_composite(image.convert("RGBA"), watermark).convert(
            "RGB"
        )

        return watermarked

    def add_metadata_watermark(
        self, image: Image.Image, metadata: Dict[str, Any]
    ) -> Image.Image:
        """Add invisible metadata watermark"""
        # TODO: Implement steganographic watermarking
        # Could embed generation parameters in LSBs or use specialized libs

        return image
